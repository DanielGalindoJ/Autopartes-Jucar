// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace JucarAutopartes.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230907212006_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Factories.Factory", b =>
                {
                    b.Property<Guid>("FactoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("FactoryID");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryAddress", b =>
                {
                    b.Property<Guid>("FactoryAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("FactoryAddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("FactoryId");

                    b.ToTable("FactoryAddresses");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryPhone", b =>
                {
                    b.Property<Guid>("FactoryPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FactoryPhoneID");

                    b.HasIndex("FactoryId");

                    b.ToTable("FactoryPhones");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelf", b =>
                {
                    b.Property<Guid>("ShelfID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeightCm")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LengthCm")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaxCapacityKgs")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShelfNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShelfID");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelving", b =>
                {
                    b.Property<Guid>("ShelvingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShelvingNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("ShelvingID");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Shelvings");
                });

            modelBuilder.Entity("Entities.Models.Factories.Warehouse", b =>
                {
                    b.Property<Guid>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("WarehouseID");

                    b.HasIndex("FactoryId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Property<Guid>("AutopartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HeightCm")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LengthCm")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VehicleZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WeightKgs")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("AutopartID");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Autoparts");

                    b.HasData(
                        new
                        {
                            AutopartID = new Guid("2a2bb8a4-ef22-4875-9cdf-1d83b06defe8"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8438),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8440),
                            Name = "PIN CRUCETA 334",
                            State = true,
                            SubcategoryId = new Guid("b449767b-601c-4811-ad3e-8b388bedf632"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("def7808b-1f75-4ed9-875a-54a09659b77e"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8444),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8444),
                            Name = "PIN TUERCA HOUSING 950 PLANO",
                            State = true,
                            SubcategoryId = new Guid("6378b394-f899-4ad4-96c6-9183c6787ad4"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("2653e777-21cb-43a5-b585-3bcbf7e513fe"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8447),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8447),
                            Name = "PIN DISCO QUINTA RUEDA",
                            State = true,
                            SubcategoryId = new Guid("52992cc2-fd87-4298-81cc-9c290e0e53ba"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("65f4a9e7-30a8-48f2-abff-843ebe0f3333"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8449),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8449),
                            Name = "PIN LEVA 1 1/4",
                            State = true,
                            SubcategoryId = new Guid("37c86e98-38d1-4ddf-bba2-df4b3098ea67"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("d0ec66b5-378b-44c1-aa29-08614564de98"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8452),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8452),
                            Name = "ARANDELA CACHO AGRALE MODELO NUEVO",
                            State = true,
                            SubcategoryId = new Guid("e08f3a12-fb06-4e53-9e37-c7d9ad42f9d3"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("322f81e3-7781-4bcd-947f-d32acc672ce6"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8455),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8455),
                            Name = "ARANDELA LEVA 3/4",
                            State = true,
                            SubcategoryId = new Guid("19e5fff4-c619-4ce4-b250-044ca30dca43"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("2d57d220-0899-4f97-ae4c-c75d132a8921"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8458),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8458),
                            Name = "LAINA SPLINDER NPR",
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("d5afd5fc-4094-4003-a242-fd35342f6bc0"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8461),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8461),
                            Name = "LAINA SPLINDER KENWORTH",
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("8db21635-4db7-453d-8010-831137e72d63"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8464),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8464),
                            Name = "LAINA SPLINDER HINO FC 500",
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        },
                        new
                        {
                            AutopartID = new Guid("f9e4d631-4015-45e1-9c11-8b88262ad802"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8467),
                            Description = "N/N",
                            HeightCm = "0",
                            LengthCm = "0",
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8467),
                            Name = "LAINA SPLINDER NISSAN MT 3000",
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            VehicleZone = "N/N",
                            WeightKgs = "0"
                        });
                });

            modelBuilder.Entity("Entities.Models.Products.AutopartMaterial", b =>
                {
                    b.Property<Guid>("AutopartMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AutopartMaterialID");

                    b.HasIndex("AutopartId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("AutopartMaterials");
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7803),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7813),
                            Name = "PIN",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("d0529dd0-a201-48d0-bbf5-447cb0d2997e"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7832),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7832),
                            Name = "ARANDELA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("ae377c3d-bbfd-4ed2-a84a-47fd42c823b6"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7834),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7834),
                            Name = "LAINA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("29961716-b4fe-43a9-874d-0acdc993a5b8"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7836),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7836),
                            Name = "EMPAQUE CARNAZA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("2e6b11a6-3f6c-47f6-beb6-f7edd8645175"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7837),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7837),
                            Name = "TELEFONO CAUCHO",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("6b158255-0b3e-47f0-bc22-5ba2ec06ffef"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7839),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(7839),
                            Name = "MEDIA LUNA",
                            State = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Products.DiscountHistory", b =>
                {
                    b.Property<Guid>("DiscountHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("FinalDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitialDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PriceHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<double>("TemporalValue")
                        .HasColumnType("float");

                    b.HasKey("DiscountHistoryID");

                    b.HasIndex("PriceHistoryId");

                    b.ToTable("DiscountHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.Inventory", b =>
                {
                    b.Property<Guid>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuantityAvailable")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("UltimateModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InventoryID");

                    b.HasIndex("AutopartId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.Property<Guid>("LossID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AmountLoss")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LossDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LossID");

                    b.HasIndex("AutopartId");

                    b.ToTable("Losses");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.Property<Guid>("MovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovementID");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Entities.Models.Products.PriceHistory", b =>
                {
                    b.Property<Guid>("PriceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("PriceHistoryID");

                    b.HasIndex("AutopartId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Property<Guid>("RawMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RawMaterialID");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.Property<Guid>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InitialStock")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("MaximumInventory")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("MinimumInventory")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuantityAvailable")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReorderPoint")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("StockID");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Property<Guid>("SubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("SubcategoryID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            SubcategoryID = new Guid("b449767b-601c-4811-ad3e-8b388bedf632"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8173),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8174),
                            Name = "PIN CRUCETA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("6378b394-f899-4ad4-96c6-9183c6787ad4"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8178),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8178),
                            Name = "PIN TUERCA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("52992cc2-fd87-4298-81cc-9c290e0e53ba"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8180),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8181),
                            Name = "PIN DISCO",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("37c86e98-38d1-4ddf-bba2-df4b3098ea67"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8182),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8182),
                            Name = "PIN LEVA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("e08f3a12-fb06-4e53-9e37-c7d9ad42f9d3"),
                            CategoryId = new Guid("d0529dd0-a201-48d0-bbf5-447cb0d2997e"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8184),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8184),
                            Name = "ARANDELA CACHO",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("19e5fff4-c619-4ce4-b250-044ca30dca43"),
                            CategoryId = new Guid("d0529dd0-a201-48d0-bbf5-447cb0d2997e"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8186),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8186),
                            Name = "ARANDELA LEVA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            CategoryId = new Guid("ae377c3d-bbfd-4ed2-a84a-47fd42c823b6"),
                            CreationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8188),
                            ModificationDate = new DateTime(2023, 9, 7, 16, 20, 6, 0, DateTimeKind.Local).AddTicks(8188),
                            Name = "LAINA SPLINDER",
                            State = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Property<Guid>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderID");

                    b.ToTable("Providers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Provider");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.Property<Guid>("ProviderAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderAddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderAddresses");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.Property<Guid>("ProviderPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProviderPhoneID");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Bill", b =>
                {
                    b.Property<Guid>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NIT")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesInvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BillID");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Entities.Models.Sales.BillDetail", b =>
                {
                    b.Property<Guid>("BillDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("IVA")
                        .HasMaxLength(2)
                        .HasColumnType("float");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<double>("SubtotalValue")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<double>("TotalValue")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<double>("UnitValue")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.HasKey("BillDetailID");

                    b.HasIndex("AutopartId");

                    b.HasIndex("BillId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.Property<Guid>("ContributionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountPaid")
                        .HasMaxLength(5)
                        .HasColumnType("float");

                    b.Property<DateTime>("ContributionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContributionID");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Customer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CustomerAddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.Property<Guid>("CustomerPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerPhoneID");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("AutopartId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Entities.Models.Sales.WayToPay", b =>
                {
                    b.Property<Guid>("WayToPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WayToPayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WayToPayID");

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.ToTable("WayToPays");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Address", b =>
                {
                    b.Property<Guid>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddresseeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AditionalInformation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressID");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.AddressType", b =>
                {
                    b.Property<Guid>("AddressTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressTypeID");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Addressee", b =>
                {
                    b.Property<Guid>("AddresseeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumntType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddresseeID");

                    b.ToTable("Addressees");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Building", b =>
                {
                    b.Property<Guid>("BuildingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BuildingID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Property<Guid>("MunicipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Capital")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MunicipalityID");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Property<Guid>("NeighborhoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NeighborhoodID");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Street", b =>
                {
                    b.Property<Guid>("StreetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NeighborhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("StreetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sufix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StreetID");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Entities.Models.Users.Position", b =>
                {
                    b.Property<Guid>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("PositionID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Entities.Models.Users.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityResidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Models.Users.UserAddress", b =>
                {
                    b.Property<Guid>("UserAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserAddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserID");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPhone", b =>
                {
                    b.Property<Guid>("UserPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserPhoneID");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPosition", b =>
                {
                    b.Property<Guid>("UserPositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserPositionID");

                    b.HasIndex("PositionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPositions");
                });

            modelBuilder.Entity("Entities.Models.Providers.LegalProvider", b =>
                {
                    b.HasBaseType("Entities.Models.Providers.Provider");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LegalRepresentative")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasDiscriminator().HasValue("LegalProvider");
                });

            modelBuilder.Entity("Entities.Models.Providers.NaturalProvider", b =>
                {
                    b.HasBaseType("Entities.Models.Providers.Provider");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("NaturalProvider");
                });

            modelBuilder.Entity("Entities.Models.Sales.LegalCustomer", b =>
                {
                    b.HasBaseType("Entities.Models.Sales.Customer");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasDiscriminator().HasValue("LegalCustomer");
                });

            modelBuilder.Entity("Entities.Models.Sales.NaturalCustomer", b =>
                {
                    b.HasBaseType("Entities.Models.Sales.Customer");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("NaturalCustomer");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("FactoryAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Factories.Factory", "Factory")
                        .WithMany("FactoryAddresses")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryPhone", b =>
                {
                    b.HasOne("Entities.Models.Factories.Factory", "Factory")
                        .WithMany("FactoryPhones")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelf", b =>
                {
                    b.HasOne("Entities.Models.Factories.Warehouse", "Warehouse")
                        .WithMany("Shelves")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelving", b =>
                {
                    b.HasOne("Entities.Models.Products.Inventory", "Inventory")
                        .WithMany("Shelvings")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Factories.Shelf", "Shelf")
                        .WithMany("Shelvings")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Entities.Models.Factories.Warehouse", b =>
                {
                    b.HasOne("Entities.Models.Factories.Factory", "Factory")
                        .WithMany("Warehouses")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.HasOne("Entities.Models.Products.Subcategory", "Subcategory")
                        .WithMany("Autoparts")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Entities.Models.Products.AutopartMaterial", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("AutopartMaterials")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("AutopartMaterials")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.DiscountHistory", b =>
                {
                    b.HasOne("Entities.Models.Products.PriceHistory", "PriceHistory")
                        .WithMany("DiscountHistories")
                        .HasForeignKey("PriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("Entities.Models.Products.Inventory", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithOne("Inventory")
                        .HasForeignKey("Entities.Models.Products.Inventory", "AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("Losses")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("Movements")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.PriceHistory", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("PriceHistories")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("Stocks")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.HasOne("Entities.Models.Products.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderPhones")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Sales.Bill", b =>
                {
                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithOne("Bill")
                        .HasForeignKey("Entities.Models.Sales.Bill", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserID");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Sales.BillDetail", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("BillDetails")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("Contributions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.PaymentMethod", "PaymentMethod")
                        .WithMany("Contributions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Models.Sales.WayToPay", b =>
                {
                    b.HasOne("Entities.Models.Sales.Bill", "Bill")
                        .WithOne("WayToPay")
                        .HasForeignKey("Entities.Models.Sales.WayToPay", "BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Address", b =>
                {
                    b.HasOne("Entities.Models.Ubications.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Addressee", "Addressee")
                        .WithMany("Addresses")
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Building", "Building")
                        .WithMany("Addresses")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Addressee");

                    b.Navigation("Building");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Department", "Department")
                        .WithMany("Municipalities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Municipality", "Municipality")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Street", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Neighborhood", "Neighborhood")
                        .WithMany("Streets")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("Entities.Models.Users.UserAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPhone", b =>
                {
                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("UserPhones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPosition", b =>
                {
                    b.HasOne("Entities.Models.Users.Position", "Position")
                        .WithMany("UserPositions")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("UserPositions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Factories.Factory", b =>
                {
                    b.Navigation("FactoryAddresses");

                    b.Navigation("FactoryPhones");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelf", b =>
                {
                    b.Navigation("Shelvings");
                });

            modelBuilder.Entity("Entities.Models.Factories.Warehouse", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Navigation("AutopartMaterials");

                    b.Navigation("BillDetails");

                    b.Navigation("Inventory");

                    b.Navigation("Losses");

                    b.Navigation("OrderDetails");

                    b.Navigation("PriceHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Entities.Models.Products.Inventory", b =>
                {
                    b.Navigation("Shelvings");
                });

            modelBuilder.Entity("Entities.Models.Products.PriceHistory", b =>
                {
                    b.Navigation("DiscountHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Navigation("AutopartMaterials");

                    b.Navigation("Movements");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Navigation("Autoparts");
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Navigation("ProviderAddresses");

                    b.Navigation("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("WayToPay");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Contributions");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Address", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("FactoryAddresses");

                    b.Navigation("ProviderAddresses");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Addressee", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Building", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Users.Position", b =>
                {
                    b.Navigation("UserPositions");
                });

            modelBuilder.Entity("Entities.Models.Users.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPhones");

                    b.Navigation("UserPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
