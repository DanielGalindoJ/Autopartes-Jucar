// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace JucarAutopartes.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231126145931_AdditionalUserFiledsForRefreshToken")]
    partial class AdditionalUserFiledsForRefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Property<Guid>("AutopartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AutopartID");

                    b.HasIndex("RawMaterialId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Autoparts");

                    b.HasData(
                        new
                        {
                            AutopartID = new Guid("2a2bb8a4-ef22-4875-9cdf-1d83b06defe8"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3902),
                            Description = "N/N",
                            Inventory = 80,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3904),
                            Name = "PIN CRUCETA 334",
                            RawMaterialId = new Guid("da932f1f-4bf1-4233-9fd6-283a0ff4ce6e"),
                            State = true,
                            SubcategoryId = new Guid("b449767b-601c-4811-ad3e-8b388bedf632"),
                            Value = 100m
                        },
                        new
                        {
                            AutopartID = new Guid("def7808b-1f75-4ed9-875a-54a09659b77e"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3916),
                            Description = "N/N",
                            Inventory = 10,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3917),
                            Name = "PIN TUERCA HOUSING 950 PLANO",
                            RawMaterialId = new Guid("da932f1f-4bf1-4233-9fd6-283a0ff4ce6e"),
                            State = true,
                            SubcategoryId = new Guid("6378b394-f899-4ad4-96c6-9183c6787ad4"),
                            Value = 150m
                        },
                        new
                        {
                            AutopartID = new Guid("2653e777-21cb-43a5-b585-3bcbf7e513fe"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3922),
                            Description = "N/N",
                            Inventory = 60,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3923),
                            Name = "PIN DISCO QUINTA RUEDA",
                            RawMaterialId = new Guid("da932f1f-4bf1-4233-9fd6-283a0ff4ce6e"),
                            State = true,
                            SubcategoryId = new Guid("52992cc2-fd87-4298-81cc-9c290e0e53ba"),
                            Value = 800m
                        },
                        new
                        {
                            AutopartID = new Guid("65f4a9e7-30a8-48f2-abff-843ebe0f3333"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3928),
                            Description = "N/N",
                            Inventory = 80,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3928),
                            Name = "PIN LEVA 1 1/4",
                            RawMaterialId = new Guid("c3818a2d-d242-4493-b437-2d74d434fa21"),
                            State = true,
                            SubcategoryId = new Guid("37c86e98-38d1-4ddf-bba2-df4b3098ea67"),
                            Value = 100m
                        },
                        new
                        {
                            AutopartID = new Guid("d0ec66b5-378b-44c1-aa29-08614564de98"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3933),
                            Description = "N/N",
                            Inventory = 200,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3934),
                            Name = "ARANDELA CACHO AGRALE MODELO NUEVO",
                            RawMaterialId = new Guid("c3818a2d-d242-4493-b437-2d74d434fa21"),
                            State = true,
                            SubcategoryId = new Guid("e08f3a12-fb06-4e53-9e37-c7d9ad42f9d3"),
                            Value = 90m
                        },
                        new
                        {
                            AutopartID = new Guid("322f81e3-7781-4bcd-947f-d32acc672ce6"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3939),
                            Description = "N/N",
                            Inventory = 190,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3940),
                            Name = "ARANDELA LEVA 3/4",
                            RawMaterialId = new Guid("c3818a2d-d242-4493-b437-2d74d434fa21"),
                            State = true,
                            SubcategoryId = new Guid("19e5fff4-c619-4ce4-b250-044ca30dca43"),
                            Value = 50m
                        },
                        new
                        {
                            AutopartID = new Guid("2d57d220-0899-4f97-ae4c-c75d132a8921"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3945),
                            Description = "N/N",
                            Inventory = 80,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3945),
                            Name = "LAINA SPLINDER NPR",
                            RawMaterialId = new Guid("c3818a2d-d242-4493-b437-2d74d434fa21"),
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            Value = 100m
                        },
                        new
                        {
                            AutopartID = new Guid("d5afd5fc-4094-4003-a242-fd35342f6bc0"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3950),
                            Description = "N/N",
                            Inventory = 65,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3951),
                            Name = "LAINA SPLINDER KENWORTH",
                            RawMaterialId = new Guid("8a7505db-8bb3-4872-a927-8113834f0c10"),
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            Value = 70m
                        },
                        new
                        {
                            AutopartID = new Guid("8db21635-4db7-453d-8010-831137e72d63"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3955),
                            Description = "N/N",
                            Inventory = 45,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3956),
                            Name = "LAINA SPLINDER HINO FC 500",
                            RawMaterialId = new Guid("8a7505db-8bb3-4872-a927-8113834f0c10"),
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            Value = 200m
                        },
                        new
                        {
                            AutopartID = new Guid("f9e4d631-4015-45e1-9c11-8b88262ad802"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3961),
                            Description = "N/N",
                            Inventory = 23,
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3961),
                            Name = "LAINA SPLINDER NISSAN MT 3000",
                            RawMaterialId = new Guid("8a7505db-8bb3-4872-a927-8113834f0c10"),
                            State = true,
                            SubcategoryId = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            Value = 150m
                        });
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2614),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2629),
                            Name = "PIN",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("d0529dd0-a201-48d0-bbf5-447cb0d2997e"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2652),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2653),
                            Name = "ARANDELA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("ae377c3d-bbfd-4ed2-a84a-47fd42c823b6"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2657),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2657),
                            Name = "LAINA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("29961716-b4fe-43a9-874d-0acdc993a5b8"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2660),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2660),
                            Name = "EMPAQUE CARNAZA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("2e6b11a6-3f6c-47f6-beb6-f7edd8645175"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2662),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2663),
                            Name = "TELEFONO CAUCHO",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("6b158255-0b3e-47f0-bc22-5ba2ec06ffef"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2665),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(2666),
                            Name = "MEDIA LUNA",
                            State = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.Property<Guid>("LossID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountLoss")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LossDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LossID");

                    b.HasIndex("AutopartId");

                    b.ToTable("Losses");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.Property<Guid>("MovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Quantity")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovementID");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Property<Guid>("RawMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("RawMaterialID");

                    b.ToTable("RawMaterials");

                    b.HasData(
                        new
                        {
                            RawMaterialID = new Guid("c3818a2d-d242-4493-b437-2d74d434fa21"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(4559),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(4561),
                            Name = "Acero",
                            State = true
                        },
                        new
                        {
                            RawMaterialID = new Guid("8a7505db-8bb3-4872-a927-8113834f0c10"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(4568),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(4569),
                            Name = "Hierro",
                            State = true
                        },
                        new
                        {
                            RawMaterialID = new Guid("da932f1f-4bf1-4233-9fd6-283a0ff4ce6e"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(4572),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(4573),
                            Name = "Cobre",
                            State = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.Property<Guid>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialStock")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("MaximumInventory")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("MinimumInventory")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityAvailable")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReorderPoint")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.HasKey("StockID");

                    b.HasIndex("RawMaterialId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Property<Guid>("SubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("SubcategoryID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            SubcategoryID = new Guid("b449767b-601c-4811-ad3e-8b388bedf632"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3396),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3399),
                            Name = "PIN CRUCETA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("6378b394-f899-4ad4-96c6-9183c6787ad4"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3407),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3408),
                            Name = "PIN TUERCA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("52992cc2-fd87-4298-81cc-9c290e0e53ba"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3466),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3467),
                            Name = "PIN DISCO",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("37c86e98-38d1-4ddf-bba2-df4b3098ea67"),
                            CategoryId = new Guid("70dcee4c-8fea-43ad-9d30-a35f5b458c1a"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3471),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3472),
                            Name = "PIN LEVA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("e08f3a12-fb06-4e53-9e37-c7d9ad42f9d3"),
                            CategoryId = new Guid("d0529dd0-a201-48d0-bbf5-447cb0d2997e"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3475),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3476),
                            Name = "ARANDELA CACHO",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("19e5fff4-c619-4ce4-b250-044ca30dca43"),
                            CategoryId = new Guid("d0529dd0-a201-48d0-bbf5-447cb0d2997e"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3480),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3480),
                            Name = "ARANDELA LEVA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("3120692a-9626-418d-baae-315eea262ab5"),
                            CategoryId = new Guid("ae377c3d-bbfd-4ed2-a84a-47fd42c823b6"),
                            CreationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3483),
                            ModificationDate = new DateTime(2023, 11, 26, 9, 59, 31, 205, DateTimeKind.Local).AddTicks(3484),
                            Name = "LAINA SPLINDER",
                            State = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Property<Guid>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdentifierType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.Property<Guid>("ProviderAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NeighborhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderAddressID");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderAddresses");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.Property<Guid>("ProviderPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProviderPhoneID");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.Property<Guid>("ContributionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasMaxLength(5)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ContributionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContributionID");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdentifierType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NeighborhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CustomerAddressID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.Property<Guid>("CustomerPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerPhoneID");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<decimal>("SubtotalValue")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitValue")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("AutopartId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Property<Guid>("MunicipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MunicipalityID");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Property<Guid>("NeighborhoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NeighborhoodID");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "290306d4-9fa1-44ae-b702-756155fb518d",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "5f3c32e2-4468-443e-a4d8-047f26666038",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "Material")
                        .WithMany("Autopart")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Products.Subcategory", "Subcategory")
                        .WithMany("Autoparts")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("Losses")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("Movements")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithOne("Stock")
                        .HasForeignKey("Entities.Models.Products.Stock", "RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.HasOne("Entities.Models.Products.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Neighborhood", "Neighborhood")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderPhones")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("Contributions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.PaymentMethod", "PaymentMethod")
                        .WithMany("Contributions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Neighborhood", "Neighborhood")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Department", "Department")
                        .WithMany("Municipalities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Municipality", "Municipality")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Navigation("Losses");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Navigation("Autopart");

                    b.Navigation("Movements");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Navigation("Autoparts");
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Navigation("ProviderAddresses");

                    b.Navigation("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerPhones");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Navigation("Contributions");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("ProviderAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
