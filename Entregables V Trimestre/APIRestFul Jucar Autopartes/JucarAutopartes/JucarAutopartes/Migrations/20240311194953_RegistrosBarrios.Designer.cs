// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace JucarAutopartes.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240311194953_RegistrosBarrios")]
    partial class RegistrosBarrios
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Property<Guid>("AutopartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AutopartID");

                    b.HasIndex("RawMaterialId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Autoparts");
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.Property<Guid>("LossID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountLoss")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LossDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LossID");

                    b.HasIndex("AutopartId");

                    b.ToTable("Losses");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.Property<Guid>("MovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Quantity")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovementID");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Property<Guid>("RawMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("RawMaterialID");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.Property<Guid>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialStock")
                        .HasColumnType("int");

                    b.Property<int>("MaximumInventory")
                        .HasColumnType("int");

                    b.Property<int>("MinimumInventory")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReorderPoint")
                        .HasColumnType("int");

                    b.HasKey("StockID");

                    b.HasIndex("RawMaterialId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Property<Guid>("SubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("SubcategoryID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Property<Guid>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdentifierType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.Property<Guid>("ProviderAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NeighborhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderAddressID");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderAddresses");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.Property<Guid>("ProviderPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProviderPhoneID");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.Property<Guid>("ContributionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasMaxLength(5)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ContributionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContributionID");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdentifierType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NeighborhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CustomerAddressID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.Property<Guid>("CustomerPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerPhoneID");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<decimal>("SubtotalValue")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitValue")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("AutopartId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = new Guid("c5424105-77c9-4cb2-bf05-ff1db7fa1b12"),
                            Name = "Bogotá D.C."
                        },
                        new
                        {
                            DepartmentID = new Guid("958920ce-4d55-4038-a87f-af783ff1d533"),
                            Name = "Cundinamarca"
                        },
                        new
                        {
                            DepartmentID = new Guid("eeb58df4-a5c4-47b9-9cea-5f98b338260f"),
                            Name = "Antioquia"
                        },
                        new
                        {
                            DepartmentID = new Guid("e6a04ebb-433f-492f-9d0d-6636e8e9c392"),
                            Name = "Boyacá"
                        },
                        new
                        {
                            DepartmentID = new Guid("25b2b57e-f928-4c8e-8eb5-23209e9a2ae1"),
                            Name = "Bolívar"
                        },
                        new
                        {
                            DepartmentID = new Guid("c26f1779-ac31-4b71-935b-cc91864f35d8"),
                            Name = "Santander"
                        });
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Property<Guid>("MunicipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MunicipalityID");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Municipalities");

                    b.HasData(
                        new
                        {
                            MunicipalityID = new Guid("c9209c76-d6e3-49c3-b9b1-27ce300cf820"),
                            DepartmentId = new Guid("c5424105-77c9-4cb2-bf05-ff1db7fa1b12"),
                            Name = "Bogotá"
                        },
                        new
                        {
                            MunicipalityID = new Guid("f2c2bfc3-b03f-44d6-8396-ce1d64245f72"),
                            DepartmentId = new Guid("958920ce-4d55-4038-a87f-af783ff1d533"),
                            Name = "Soacha"
                        },
                        new
                        {
                            MunicipalityID = new Guid("a3abfc70-4368-4f24-b4bc-378d2ea1c72e"),
                            DepartmentId = new Guid("958920ce-4d55-4038-a87f-af783ff1d533"),
                            Name = "Facatativá"
                        },
                        new
                        {
                            MunicipalityID = new Guid("ffad25db-cd64-4f75-96df-d4db4a698e3a"),
                            DepartmentId = new Guid("958920ce-4d55-4038-a87f-af783ff1d533"),
                            Name = "Zipaquirá"
                        },
                        new
                        {
                            MunicipalityID = new Guid("0070ac2f-33fe-4ee6-95ee-559838f741cc"),
                            DepartmentId = new Guid("958920ce-4d55-4038-a87f-af783ff1d533"),
                            Name = "Chía"
                        },
                        new
                        {
                            MunicipalityID = new Guid("efc46672-7656-408a-aed7-33110510d825"),
                            DepartmentId = new Guid("958920ce-4d55-4038-a87f-af783ff1d533"),
                            Name = "Fusagasugá"
                        },
                        new
                        {
                            MunicipalityID = new Guid("afa8f2fb-5494-460e-8a5d-91ba20052bb0"),
                            DepartmentId = new Guid("eeb58df4-a5c4-47b9-9cea-5f98b338260f"),
                            Name = "Medellín"
                        },
                        new
                        {
                            MunicipalityID = new Guid("e8eb2e8c-3421-426b-8035-049a8367980d"),
                            DepartmentId = new Guid("eeb58df4-a5c4-47b9-9cea-5f98b338260f"),
                            Name = "Envigado"
                        },
                        new
                        {
                            MunicipalityID = new Guid("444b2ed7-85b9-4fc4-8421-e32227de9e5c"),
                            DepartmentId = new Guid("eeb58df4-a5c4-47b9-9cea-5f98b338260f"),
                            Name = "Bello"
                        },
                        new
                        {
                            MunicipalityID = new Guid("12601027-07fe-435d-bf86-c0b8b63e7576"),
                            DepartmentId = new Guid("eeb58df4-a5c4-47b9-9cea-5f98b338260f"),
                            Name = "Itagüí"
                        },
                        new
                        {
                            MunicipalityID = new Guid("77292549-bb02-48d3-b9cd-70b7d3a4a22f"),
                            DepartmentId = new Guid("eeb58df4-a5c4-47b9-9cea-5f98b338260f"),
                            Name = "Sabaneta"
                        },
                        new
                        {
                            MunicipalityID = new Guid("6a1e6bff-b542-4731-ad4c-8b80097a0a61"),
                            DepartmentId = new Guid("e6a04ebb-433f-492f-9d0d-6636e8e9c392"),
                            Name = "Tunja"
                        },
                        new
                        {
                            MunicipalityID = new Guid("0aa41c1a-bce7-4cd0-b372-7bfca622b3c0"),
                            DepartmentId = new Guid("e6a04ebb-433f-492f-9d0d-6636e8e9c392"),
                            Name = "Duitama"
                        },
                        new
                        {
                            MunicipalityID = new Guid("0efcc66c-64f7-4187-a634-c61b4f54984b"),
                            DepartmentId = new Guid("e6a04ebb-433f-492f-9d0d-6636e8e9c392"),
                            Name = "Sogamoso"
                        },
                        new
                        {
                            MunicipalityID = new Guid("9f2efb19-b9d0-4e2e-a2d9-ca94eecbbae5"),
                            DepartmentId = new Guid("e6a04ebb-433f-492f-9d0d-6636e8e9c392"),
                            Name = "Chiquinquirá"
                        },
                        new
                        {
                            MunicipalityID = new Guid("07cae774-1c0b-4b94-a76a-463d475d93fc"),
                            DepartmentId = new Guid("e6a04ebb-433f-492f-9d0d-6636e8e9c392"),
                            Name = "Paipa"
                        },
                        new
                        {
                            MunicipalityID = new Guid("863104b2-3845-4fbf-b0aa-0471015ba6cc"),
                            DepartmentId = new Guid("25b2b57e-f928-4c8e-8eb5-23209e9a2ae1"),
                            Name = "Cartagena"
                        },
                        new
                        {
                            MunicipalityID = new Guid("09ee73c3-df0d-432e-99b6-f444bc6f25de"),
                            DepartmentId = new Guid("25b2b57e-f928-4c8e-8eb5-23209e9a2ae1"),
                            Name = "Turbaco"
                        },
                        new
                        {
                            MunicipalityID = new Guid("04445038-5881-4660-9a97-9bc53687c8aa"),
                            DepartmentId = new Guid("25b2b57e-f928-4c8e-8eb5-23209e9a2ae1"),
                            Name = "Magangué"
                        },
                        new
                        {
                            MunicipalityID = new Guid("a1aa7f91-20a2-403d-ad2d-6ef971a46832"),
                            DepartmentId = new Guid("25b2b57e-f928-4c8e-8eb5-23209e9a2ae1"),
                            Name = "Soledad"
                        },
                        new
                        {
                            MunicipalityID = new Guid("f90c2016-dd81-46e0-ab68-919e7d5be04b"),
                            DepartmentId = new Guid("25b2b57e-f928-4c8e-8eb5-23209e9a2ae1"),
                            Name = "Arjona"
                        },
                        new
                        {
                            MunicipalityID = new Guid("ba0e0021-eca6-4e4d-bb01-31a2fbc36fe5"),
                            DepartmentId = new Guid("c26f1779-ac31-4b71-935b-cc91864f35d8"),
                            Name = "Bucaramanga"
                        },
                        new
                        {
                            MunicipalityID = new Guid("5376159b-6903-439f-9045-36b176354e55"),
                            DepartmentId = new Guid("c26f1779-ac31-4b71-935b-cc91864f35d8"),
                            Name = "Floridablanca"
                        },
                        new
                        {
                            MunicipalityID = new Guid("fb28c89a-4565-48a2-9516-b8b25da4efd8"),
                            DepartmentId = new Guid("c26f1779-ac31-4b71-935b-cc91864f35d8"),
                            Name = "Girón"
                        },
                        new
                        {
                            MunicipalityID = new Guid("26af7150-f00e-4b4d-bba4-a6156f161a18"),
                            DepartmentId = new Guid("c26f1779-ac31-4b71-935b-cc91864f35d8"),
                            Name = "Pídecuesta"
                        },
                        new
                        {
                            MunicipalityID = new Guid("515185c4-491c-483b-b2d1-d8e99eaa0189"),
                            DepartmentId = new Guid("c26f1779-ac31-4b71-935b-cc91864f35d8"),
                            Name = "Barrancabermeja"
                        });
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Property<Guid>("NeighborhoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NeighborhoodID");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Neighborhoods");

                    b.HasData(
                        new
                        {
                            NeighborhoodID = new Guid("0adb69c7-8c3b-4b7f-b2ee-70153f2bb33f"),
                            MunicipalityId = new Guid("afa8f2fb-5494-460e-8a5d-91ba20052bb0"),
                            Name = "El Poblado"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("847a9d5f-c78d-40c3-8a74-b1ec2720b424"),
                            MunicipalityId = new Guid("afa8f2fb-5494-460e-8a5d-91ba20052bb0"),
                            Name = "Laureles"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("d03940eb-8802-4139-8513-74756bb4ba1f"),
                            MunicipalityId = new Guid("e8eb2e8c-3421-426b-8035-049a8367980d"),
                            Name = "Jardínes"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("2eba303f-b2e5-4a99-a086-9b70a2b0b3cc"),
                            MunicipalityId = new Guid("e8eb2e8c-3421-426b-8035-049a8367980d"),
                            Name = "El Dorado"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("11da7410-5d21-4c5d-8310-0bf0ad1f0f79"),
                            MunicipalityId = new Guid("444b2ed7-85b9-4fc4-8421-e32227de9e5c"),
                            Name = "Niquía"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("7be523f2-d9e3-4f17-a3f6-6bfd1d59b203"),
                            MunicipalityId = new Guid("444b2ed7-85b9-4fc4-8421-e32227de9e5c"),
                            Name = "San Félix"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("9b664bdd-3685-4c78-b381-bbb5d0343b85"),
                            MunicipalityId = new Guid("12601027-07fe-435d-bf86-c0b8b63e7576"),
                            Name = "Santa María"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("8e4b97f6-fef0-44dd-9b28-cff12cdbffac"),
                            MunicipalityId = new Guid("12601027-07fe-435d-bf86-c0b8b63e7576"),
                            Name = "El Porvenir"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("da8bf5a8-8d02-487b-a25e-32d8d08cfa95"),
                            MunicipalityId = new Guid("77292549-bb02-48d3-b9cd-70b7d3a4a22f"),
                            Name = "Ciudadela Robledo"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("6eb90f2c-1eb5-4823-9ba8-4b59d4101a86"),
                            MunicipalityId = new Guid("77292549-bb02-48d3-b9cd-70b7d3a4a22f"),
                            Name = "La Doctora"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("9d54cec9-1677-4e9a-87ed-6d71d8e780d3"),
                            MunicipalityId = new Guid("6a1e6bff-b542-4731-ad4c-8b80097a0a61"),
                            Name = "Centro Histórico"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("4b9caeb5-0572-4e98-ac45-a01efe3ff258"),
                            MunicipalityId = new Guid("6a1e6bff-b542-4731-ad4c-8b80097a0a61"),
                            Name = "El Topo"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("a32b5c95-0232-49bc-9fff-b75b52599e24"),
                            MunicipalityId = new Guid("0aa41c1a-bce7-4cd0-b372-7bfca622b3c0"),
                            Name = "El Libertador"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("af50ccf0-b2d6-406b-b3ac-e4337b6bb717"),
                            MunicipalityId = new Guid("0aa41c1a-bce7-4cd0-b372-7bfca622b3c0"),
                            Name = "La Floresta"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("d53a814f-2ba4-4e5a-a542-fe5c13e7b44f"),
                            MunicipalityId = new Guid("0efcc66c-64f7-4187-a634-c61b4f54984b"),
                            Name = "Centro"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("f0455fc4-ff3f-4569-9820-4fa9932efe71"),
                            MunicipalityId = new Guid("0efcc66c-64f7-4187-a634-c61b4f54984b"),
                            Name = "La Campiña"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("c5897d98-6fc5-462f-98a6-b28d62497047"),
                            MunicipalityId = new Guid("9f2efb19-b9d0-4e2e-a2d9-ca94eecbbae5"),
                            Name = "Barrio Simón Bólivar"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("60462cc0-e02d-4daa-94a1-ef67d60c3b7f"),
                            MunicipalityId = new Guid("9f2efb19-b9d0-4e2e-a2d9-ca94eecbbae5"),
                            Name = "Barrio San Antonio"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("b820e69d-8a05-4a55-b07d-e0e93abbecc8"),
                            MunicipalityId = new Guid("07cae774-1c0b-4b94-a76a-463d475d93fc"),
                            Name = "La Colina"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("8a77da5b-74d8-4c73-a24c-9f9cba66120f"),
                            MunicipalityId = new Guid("07cae774-1c0b-4b94-a76a-463d475d93fc"),
                            Name = "Santa Rita"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("d4bfcebc-90cc-4657-9281-f5fe30e18aea"),
                            MunicipalityId = new Guid("ba0e0021-eca6-4e4d-bb01-31a2fbc36fe5"),
                            Name = "Cabecera del Llano"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("9c8c2877-c973-4493-8032-0bf90fee4206"),
                            MunicipalityId = new Guid("ba0e0021-eca6-4e4d-bb01-31a2fbc36fe5"),
                            Name = "Provenza"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("b723a4d9-22b7-470b-b9c6-637429e6028b"),
                            MunicipalityId = new Guid("5376159b-6903-439f-9045-36b176354e55"),
                            Name = "Cañaveral"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("edea2a92-d5a3-4350-bcbf-ac80b770d359"),
                            MunicipalityId = new Guid("5376159b-6903-439f-9045-36b176354e55"),
                            Name = "Lagos del Cacique"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("0e05d355-c573-4b37-bd09-cc6a4ff1f459"),
                            MunicipalityId = new Guid("fb28c89a-4565-48a2-9516-b8b25da4efd8"),
                            Name = "Villa Carolina"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("d40747ce-547e-4334-a211-7a3b93fa5fb4"),
                            MunicipalityId = new Guid("fb28c89a-4565-48a2-9516-b8b25da4efd8"),
                            Name = "Altos de Pan de Azúcar"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("45350c07-2e64-4025-87d3-d063a885c46f"),
                            MunicipalityId = new Guid("26af7150-f00e-4b4d-bba4-a6156f161a18"),
                            Name = "Prados del Mutis"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("dda14777-d0f8-416c-97f3-318607704bbf"),
                            MunicipalityId = new Guid("26af7150-f00e-4b4d-bba4-a6156f161a18"),
                            Name = "Villa del Prado"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("16c7f9dd-8700-4d96-8453-4e647bdeaeee"),
                            MunicipalityId = new Guid("515185c4-491c-483b-b2d1-d8e99eaa0189"),
                            Name = "San Rafael"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("6f263844-aa55-4280-840c-27bda923beac"),
                            MunicipalityId = new Guid("515185c4-491c-483b-b2d1-d8e99eaa0189"),
                            Name = "Los Cedros"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("7f1629c6-e440-4bd4-9338-d7e284100140"),
                            MunicipalityId = new Guid("863104b2-3845-4fbf-b0aa-0471015ba6cc"),
                            Name = "Bocagrande"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("2f2a97df-9a51-4bbe-a26c-88f71d803d01"),
                            MunicipalityId = new Guid("863104b2-3845-4fbf-b0aa-0471015ba6cc"),
                            Name = "Getsemaní"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("4c589372-1a7e-431f-a9ea-fb8d748c493b"),
                            MunicipalityId = new Guid("09ee73c3-df0d-432e-99b6-f444bc6f25de"),
                            Name = "El Pueblito"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("16b2e90d-2f62-4dc4-9e4c-f7bab28d5e8d"),
                            MunicipalityId = new Guid("09ee73c3-df0d-432e-99b6-f444bc6f25de"),
                            Name = "Las Palmeras"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("a2a07452-dc8e-4cff-828d-75d9cdcdafb5"),
                            MunicipalityId = new Guid("04445038-5881-4660-9a97-9bc53687c8aa"),
                            Name = "El Pueblo Nuevo"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("b077ca81-a434-46ce-bc15-b242675a011c"),
                            MunicipalityId = new Guid("04445038-5881-4660-9a97-9bc53687c8aa"),
                            Name = "Barrio Libertad"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("f22856fd-a0f5-4cb1-8d76-d703afaa3a66"),
                            MunicipalityId = new Guid("a1aa7f91-20a2-403d-ad2d-6ef971a46832"),
                            Name = "El Hipódromo"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("237d8ae9-36c6-4199-88fd-b8eea93eb2fc"),
                            MunicipalityId = new Guid("a1aa7f91-20a2-403d-ad2d-6ef971a46832"),
                            Name = "Las Moras"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("f59ffed8-d257-48b9-b961-3499c41cfa04"),
                            MunicipalityId = new Guid("f90c2016-dd81-46e0-ab68-919e7d5be04b"),
                            Name = "Centro"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("48065608-6caa-4c95-955e-8f748393fbdd"),
                            MunicipalityId = new Guid("f90c2016-dd81-46e0-ab68-919e7d5be04b"),
                            Name = "Barrio El Cacao"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("bc1664e2-92fa-45b0-9868-fdf4b669e78e"),
                            MunicipalityId = new Guid("f2c2bfc3-b03f-44d6-8396-ce1d64245f72"),
                            Name = "Ciudad Verde"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("87004677-4dff-4bbe-a941-c311f017a769"),
                            MunicipalityId = new Guid("f2c2bfc3-b03f-44d6-8396-ce1d64245f72"),
                            Name = "Compartir"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("ec91bd61-d1e4-469d-8b78-5e544e4c7c73"),
                            MunicipalityId = new Guid("a3abfc70-4368-4f24-b4bc-378d2ea1c72e"),
                            Name = "San Rafael"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("514e8495-fc39-4233-936d-a2b7ee255444"),
                            MunicipalityId = new Guid("a3abfc70-4368-4f24-b4bc-378d2ea1c72e"),
                            Name = "La Estación"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("4fd9e0cc-2d93-4245-9a82-5dd59563c691"),
                            MunicipalityId = new Guid("ffad25db-cd64-4f75-96df-d4db4a698e3a"),
                            Name = "La Esperanza"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("a1a2c738-c1db-4e39-9fdc-2855536d0f6a"),
                            MunicipalityId = new Guid("ffad25db-cd64-4f75-96df-d4db4a698e3a"),
                            Name = "El Carmen"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("5cde767f-13f9-4462-a96c-2f7cb9aa6e0a"),
                            MunicipalityId = new Guid("0070ac2f-33fe-4ee6-95ee-559838f741cc"),
                            Name = "Guaymaral"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("cefb34aa-e2da-4a37-ba8c-0071d40ae846"),
                            MunicipalityId = new Guid("0070ac2f-33fe-4ee6-95ee-559838f741cc"),
                            Name = "La Pradera"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("3c276cb8-6ee2-4950-8c70-d0b193b729e6"),
                            MunicipalityId = new Guid("efc46672-7656-408a-aed7-33110510d825"),
                            Name = "La Esperanza"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("57888bd6-957f-4754-9cc0-587d15b31f6f"),
                            MunicipalityId = new Guid("efc46672-7656-408a-aed7-33110510d825"),
                            Name = "Centro"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("a7d35971-aa5b-4479-8f4d-71de97846c74"),
                            MunicipalityId = new Guid("c9209c76-d6e3-49c3-b9b1-27ce300cf820"),
                            Name = "Chapinero"
                        },
                        new
                        {
                            NeighborhoodID = new Guid("610ae713-3a68-41c1-92ac-dd844c60051a"),
                            MunicipalityId = new Guid("c9209c76-d6e3-49c3-b9b1-27ce300cf820"),
                            Name = "Usaquén"
                        });
                });

            modelBuilder.Entity("Entities.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "Material")
                        .WithMany("Autopart")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Products.Subcategory", "Subcategory")
                        .WithMany("Autoparts")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("Losses")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("Movements")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithOne("Stock")
                        .HasForeignKey("Entities.Models.Products.Stock", "RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.HasOne("Entities.Models.Products.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Neighborhood", "Neighborhood")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderPhones")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("Contributions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.PaymentMethod", "PaymentMethod")
                        .WithMany("Contributions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Neighborhood", "Neighborhood")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AutopartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Department", "Department")
                        .WithMany("Municipalities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Municipality", "Municipality")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Navigation("Losses");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Navigation("Autopart");

                    b.Navigation("Movements");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Navigation("Autoparts");
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Navigation("ProviderAddresses");

                    b.Navigation("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerPhones");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Navigation("Contributions");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("ProviderAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
