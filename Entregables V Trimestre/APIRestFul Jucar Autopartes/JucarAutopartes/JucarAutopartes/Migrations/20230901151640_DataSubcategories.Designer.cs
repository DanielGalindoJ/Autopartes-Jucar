// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace JucarAutopartes.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230901151640_DataSubcategories")]
    partial class DataSubcategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Factories.Factory", b =>
                {
                    b.Property<Guid>("FactoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("FactoryID");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryAddress", b =>
                {
                    b.Property<Guid>("FactoryAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("FactoryAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("FactoryID");

                    b.ToTable("FactoryAddresses");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryPhone", b =>
                {
                    b.Property<Guid>("FactoryPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FactoryPhoneID");

                    b.HasIndex("FactoryID");

                    b.ToTable("FactoryPhones");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelf", b =>
                {
                    b.Property<Guid>("ShelfID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeightCm")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LengthCm")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaxCapacityKgs")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShelfNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShelfID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelving", b =>
                {
                    b.Property<Guid>("ShelvingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InventoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ShelfID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShelvingNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("ShelvingID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("ShelfID");

                    b.ToTable("Shelvings");
                });

            modelBuilder.Entity("Entities.Models.Factories.Warehouse", b =>
                {
                    b.Property<Guid>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("WarehouseID");

                    b.HasIndex("FactoryID");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Property<Guid>("AutopartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HeightCm")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LengthCm")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubcategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VehicleZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WeightKgs")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("AutopartID");

                    b.HasIndex("SubcategoryID");

                    b.ToTable("Autoparts");
                });

            modelBuilder.Entity("Entities.Models.Products.AutopartMaterial", b =>
                {
                    b.Property<Guid>("AutopartMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RawMaterialID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AutopartMaterialID");

                    b.HasIndex("AutopartID");

                    b.HasIndex("RawMaterialID");

                    b.ToTable("AutopartMaterials");
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("1ddb1b04-b87e-4a48-b997-79357cd39669"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9786),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9830),
                            Name = "PIN",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("0ae5b20f-564c-4186-8ce8-11f80369a94a"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9862),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9863),
                            Name = "ARANDELA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("2bbbd7a7-eb2e-4354-9efe-aeea69dae563"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9865),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9866),
                            Name = "LAINA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("584aa268-9449-4730-9279-f88f6e45d739"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9868),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9869),
                            Name = "EMPAQUE CARNAZA",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("57ae325e-cd5d-4cfc-be8c-5ffb026001c9"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9885),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9886),
                            Name = "TELEFONO CAUCHO",
                            State = true
                        },
                        new
                        {
                            CategoryID = new Guid("0ed5cd10-b1a9-4fed-beab-738d6cd50e44"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9888),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 557, DateTimeKind.Local).AddTicks(9889),
                            Name = "MEDIA LUNA",
                            State = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Products.DiscountHistory", b =>
                {
                    b.Property<Guid>("DiscountHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("FinalDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitialDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PriceHistoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<double>("TemporalValue")
                        .HasColumnType("float");

                    b.HasKey("DiscountHistoryID");

                    b.HasIndex("PriceHistoryID");

                    b.ToTable("DiscountHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.Inventory", b =>
                {
                    b.Property<Guid>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuantityAvailable")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("UltimateModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InventoryID");

                    b.HasIndex("AutopartID")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.Property<Guid>("LossID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AmountLoss")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("AutopartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LossDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LossID");

                    b.HasIndex("AutopartID");

                    b.ToTable("Losses");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.Property<Guid>("MovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("RawMaterialID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovementID");

                    b.HasIndex("RawMaterialID");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Entities.Models.Products.PriceHistory", b =>
                {
                    b.Property<Guid>("PriceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("PriceHistoryID");

                    b.HasIndex("AutopartID");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Property<Guid>("RawMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RawMaterialID");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.Property<Guid>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InitialStock")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("MaximumInventory")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("MinimumInventory")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuantityAvailable")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("RawMaterialID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReorderPoint")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("StockID");

                    b.HasIndex("RawMaterialID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Property<Guid>("SubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("SubcategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            SubcategoryID = new Guid("0965157a-9da8-4f9e-8ca2-f692b30dbe05"),
                            CategoryID = new Guid("7aa51602-6cfa-4b17-b1b8-853f0e0388c6"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(605),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(608),
                            Name = "PIN CRUCETA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("07bb7e86-05e3-4815-9e89-81976d902938"),
                            CategoryID = new Guid("7aa51602-6cfa-4b17-b1b8-853f0e0388c6"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(640),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(641),
                            Name = "PIN TUERCA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("7aa3fe83-92ff-4c8a-ad67-5452117d824b"),
                            CategoryID = new Guid("7aa51602-6cfa-4b17-b1b8-853f0e0388c6"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(705),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(705),
                            Name = "PIN DISCO",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("1df165e9-cd41-448e-b143-77c32e895087"),
                            CategoryID = new Guid("7aa51602-6cfa-4b17-b1b8-853f0e0388c6"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(710),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(711),
                            Name = "PIN LEVA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("85f0b298-b551-450b-9961-1e019e13a679"),
                            CategoryID = new Guid("b78ff6fb-eeea-4685-940e-5aa3b2de64f1"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(714),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(715),
                            Name = "ARANDELA CACHO",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("7f1ad2af-9341-4b54-bb13-bce52110de80"),
                            CategoryID = new Guid("b78ff6fb-eeea-4685-940e-5aa3b2de64f1"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(719),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(719),
                            Name = "ARANDELA LEVA",
                            State = true
                        },
                        new
                        {
                            SubcategoryID = new Guid("c4564044-3f5d-47b0-8c15-a5d36d6c946a"),
                            CategoryID = new Guid("655a812b-f7b0-42cc-b438-8d06ece10291"),
                            CreationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(729),
                            ModificationDate = new DateTime(2023, 9, 1, 10, 16, 39, 558, DateTimeKind.Local).AddTicks(730),
                            Name = "LAINA SPLINDER",
                            State = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Property<Guid>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderID");

                    b.ToTable("Providers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Provider");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.Property<Guid>("ProviderAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProviderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ProviderAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ProviderID");

                    b.ToTable("ProviderAddresses");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.Property<Guid>("ProviderPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ProviderID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProviderPhoneID");

                    b.HasIndex("ProviderID");

                    b.ToTable("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Bill", b =>
                {
                    b.Property<Guid>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NIT")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesInvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BillID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Entities.Models.Sales.BillDetail", b =>
                {
                    b.Property<Guid>("BillDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("IVA")
                        .HasMaxLength(2)
                        .HasColumnType("float");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<double>("SubtotalValue")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<double>("TotalValue")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<double>("UnitValue")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.HasKey("BillDetailID");

                    b.HasIndex("AutopartID");

                    b.HasIndex("BillID");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.Property<Guid>("ContributionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountPaid")
                        .HasMaxLength(5)
                        .HasColumnType("float");

                    b.Property<DateTime>("ContributionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContributionID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Customer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("CustomerAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.Property<Guid>("CustomerPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerPhoneID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutopartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("AutopartID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Entities.Models.Sales.WayToPay", b =>
                {
                    b.Property<Guid>("WayToPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WayToPayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WayToPayID");

                    b.HasIndex("BillID")
                        .IsUnique();

                    b.ToTable("WayToPays");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Address", b =>
                {
                    b.Property<Guid>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddresseeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AditionalInformation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("BuildingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StreetID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressID");

                    b.HasIndex("AddressTypeID");

                    b.HasIndex("AddresseeID");

                    b.HasIndex("BuildingID");

                    b.HasIndex("StreetID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.AddressType", b =>
                {
                    b.Property<Guid>("AddressTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressTypeID");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Addressee", b =>
                {
                    b.Property<Guid>("AddresseeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumntType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddresseeID");

                    b.ToTable("Addressees");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Building", b =>
                {
                    b.Property<Guid>("BuildingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BuildingID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Property<Guid>("MunicipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Capital")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MunicipalityID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Property<Guid>("NeighborhoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MunicipalityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NeighborhoodID");

                    b.HasIndex("MunicipalityID");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Street", b =>
                {
                    b.Property<Guid>("StreetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NeighborhoodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("StreetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sufix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StreetID");

                    b.HasIndex("NeighborhoodID");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Entities.Models.Users.Position", b =>
                {
                    b.Property<Guid>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("PositionID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Entities.Models.Users.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityResidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Models.Users.UserAddress", b =>
                {
                    b.Property<Guid>("UserAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPhone", b =>
                {
                    b.Property<Guid>("UserPhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserPhoneID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPosition", b =>
                {
                    b.Property<Guid>("UserPositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserPositionID");

                    b.HasIndex("PositionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPositions");
                });

            modelBuilder.Entity("Entities.Models.Providers.LegalProvider", b =>
                {
                    b.HasBaseType("Entities.Models.Providers.Provider");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LegalRepresentative")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasDiscriminator().HasValue("LegalProvider");
                });

            modelBuilder.Entity("Entities.Models.Providers.NaturalProvider", b =>
                {
                    b.HasBaseType("Entities.Models.Providers.Provider");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("NaturalProvider");
                });

            modelBuilder.Entity("Entities.Models.Sales.LegalCustomer", b =>
                {
                    b.HasBaseType("Entities.Models.Sales.Customer");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasDiscriminator().HasValue("LegalCustomer");
                });

            modelBuilder.Entity("Entities.Models.Sales.NaturalCustomer", b =>
                {
                    b.HasBaseType("Entities.Models.Sales.Customer");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("NaturalCustomer");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("FactoryAddresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Factories.Factory", "Factory")
                        .WithMany("FactoryAddresses")
                        .HasForeignKey("FactoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Entities.Models.Factories.FactoryPhone", b =>
                {
                    b.HasOne("Entities.Models.Factories.Factory", "Factory")
                        .WithMany("FactoryPhones")
                        .HasForeignKey("FactoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelf", b =>
                {
                    b.HasOne("Entities.Models.Factories.Warehouse", "Warehouse")
                        .WithMany("Shelves")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelving", b =>
                {
                    b.HasOne("Entities.Models.Products.Inventory", "Inventory")
                        .WithMany("Shelvings")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Factories.Shelf", "Shelf")
                        .WithMany("Shelvings")
                        .HasForeignKey("ShelfID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Entities.Models.Factories.Warehouse", b =>
                {
                    b.HasOne("Entities.Models.Factories.Factory", "Factory")
                        .WithMany("Warehouses")
                        .HasForeignKey("FactoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.HasOne("Entities.Models.Products.Subcategory", "Subcategory")
                        .WithMany("Autoparts")
                        .HasForeignKey("SubcategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Entities.Models.Products.AutopartMaterial", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("AutopartMaterials")
                        .HasForeignKey("AutopartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("AutopartMaterials")
                        .HasForeignKey("RawMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.DiscountHistory", b =>
                {
                    b.HasOne("Entities.Models.Products.PriceHistory", "PriceHistory")
                        .WithMany("DiscountHistories")
                        .HasForeignKey("PriceHistoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("Entities.Models.Products.Inventory", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithOne("Inventory")
                        .HasForeignKey("Entities.Models.Products.Inventory", "AutopartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Loss", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("Losses")
                        .HasForeignKey("AutopartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Movement", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("Movements")
                        .HasForeignKey("RawMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.PriceHistory", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("PriceHistories")
                        .HasForeignKey("AutopartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");
                });

            modelBuilder.Entity("Entities.Models.Products.Stock", b =>
                {
                    b.HasOne("Entities.Models.Products.RawMaterial", "RawMaterial")
                        .WithMany("Stocks")
                        .HasForeignKey("RawMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.HasOne("Entities.Models.Products.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Providers.ProviderPhone", b =>
                {
                    b.HasOne("Entities.Models.Providers.Provider", "Provider")
                        .WithMany("ProviderPhones")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Entities.Models.Sales.Bill", b =>
                {
                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithOne("Bill")
                        .HasForeignKey("Entities.Models.Sales.Bill", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserID");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Sales.BillDetail", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("BillDetails")
                        .HasForeignKey("AutopartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Entities.Models.Sales.Contribution", b =>
                {
                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("Contributions")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.PaymentMethod", "PaymentMethod")
                        .WithMany("Contributions")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.CustomerPhone", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.HasOne("Entities.Models.Sales.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Sales.OrderDetail", b =>
                {
                    b.HasOne("Entities.Models.Products.Autopart", "Autopart")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AutopartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Sales.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autopart");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Models.Sales.WayToPay", b =>
                {
                    b.HasOne("Entities.Models.Sales.Bill", "Bill")
                        .WithOne("WayToPay")
                        .HasForeignKey("Entities.Models.Sales.WayToPay", "BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Address", b =>
                {
                    b.HasOne("Entities.Models.Ubications.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Addressee", "Addressee")
                        .WithMany("Addresses")
                        .HasForeignKey("AddresseeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Building", "Building")
                        .WithMany("Addresses")
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ubications.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Addressee");

                    b.Navigation("Building");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Department", "Department")
                        .WithMany("Municipalities")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Municipality", "Municipality")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Street", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Neighborhood", "Neighborhood")
                        .WithMany("Streets")
                        .HasForeignKey("NeighborhoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("Entities.Models.Users.UserAddress", b =>
                {
                    b.HasOne("Entities.Models.Ubications.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserID");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPhone", b =>
                {
                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("UserPhones")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Users.UserPosition", b =>
                {
                    b.HasOne("Entities.Models.Users.Position", "Position")
                        .WithMany("UserPositions")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", "User")
                        .WithMany("UserPositions")
                        .HasForeignKey("UserID");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Factories.Factory", b =>
                {
                    b.Navigation("FactoryAddresses");

                    b.Navigation("FactoryPhones");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Entities.Models.Factories.Shelf", b =>
                {
                    b.Navigation("Shelvings");
                });

            modelBuilder.Entity("Entities.Models.Factories.Warehouse", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("Entities.Models.Products.Autopart", b =>
                {
                    b.Navigation("AutopartMaterials");

                    b.Navigation("BillDetails");

                    b.Navigation("Inventory");

                    b.Navigation("Losses");

                    b.Navigation("OrderDetails");

                    b.Navigation("PriceHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Entities.Models.Products.Inventory", b =>
                {
                    b.Navigation("Shelvings");
                });

            modelBuilder.Entity("Entities.Models.Products.PriceHistory", b =>
                {
                    b.Navigation("DiscountHistories");
                });

            modelBuilder.Entity("Entities.Models.Products.RawMaterial", b =>
                {
                    b.Navigation("AutopartMaterials");

                    b.Navigation("Movements");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Entities.Models.Products.Subcategory", b =>
                {
                    b.Navigation("Autoparts");
                });

            modelBuilder.Entity("Entities.Models.Providers.Provider", b =>
                {
                    b.Navigation("ProviderAddresses");

                    b.Navigation("ProviderPhones");
                });

            modelBuilder.Entity("Entities.Models.Sales.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("WayToPay");
                });

            modelBuilder.Entity("Entities.Models.Sales.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.Sales.Order", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Contributions");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Models.Sales.PaymentMethod", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Address", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("FactoryAddresses");

                    b.Navigation("ProviderAddresses");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Addressee", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Building", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Department", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Municipality", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Neighborhood", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Entities.Models.Ubications.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Users.Position", b =>
                {
                    b.Navigation("UserPositions");
                });

            modelBuilder.Entity("Entities.Models.Users.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPhones");

                    b.Navigation("UserPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
